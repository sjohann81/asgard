/*
Asgard only supports one dimensional arrays, but we can work our way out.

Suppose a matrix has size W (width, columns) by H (height, lines)
(i.e. i goes from 0 to (H-1) and j from 0 to (W-1)), then:

(in C notation)
matrix[i][j] = array[i * W + j]

Obviously, the array has size W * H. For higher dimensions this idea
generalizes (i.e. for a 3D array W (width) * H (height) * D (depth)):

(in C notation)
matrix[i][j][k] = array[i * W * H + j * W + k]
*/

/*
show a matrix (i is row and j is column)
*/
func matrix_print(int a, int l, int c){
	int i, j;
	
	i = 0;
	while (i < l){
		j = 0;
		while (j < c){
			printnum(a[i * c + j]);
			puts("\t");
			j = j + 1;
		}
		i = i + 1;
		puts("\n");
	}
}

/*
show each plane (i is plane, j is row and k is column)
*/
func cube_print(int a, int p, int l, int c){
	int i, j, k;
	
	i = 0;
	while (i < p){
		j = 0;
		while (j < l){
			k = 0;
			while (k < c){
				printnum(a[i * l * c + j * c + k]);
				puts("\t");
				k = k + 1;
			}
			j = j + 1;
			puts("\n");
		}
		i = i + 1;
		puts("\n");
	}
}

/*
matrix is composed by several blocks (sub matrixes)
matrix, height, width, block line, block column, block width, block height
*/
func matrix_print_sub(int a, int h, int w, int k, int l, int bh, int bw){
	int i, j;
	
	i = 0;
	while (i < bh) {
		j = 0;
		while (j < bw) {
			printnum(a[(i + k * bh) * w + (j + l * bw)]);
			puts("\t");
			j = j + 1;
		}
		puts("\n");
		i = i + 1;
	}
}

func main(){
	int matrix = {
			1, 2, 3, 4,
			5, 6, 7, 8,
			9, 10, 11, 12
	};
	int cube = {
			11, 12, 13, 14,
			15, 16, 17, 18,
			
			21, 22, 23, 24,
			25, 26, 27, 28,
			
			31, 32, 33, 34,
			35, 36, 37, 38,
			
			41, 42, 43, 44,
			45, 46, 47, 48,
			
			51, 52, 53, 54,
			55, 56, 57, 58
	};
	/* 9x8 matrix */
	int m2 = {
		11, 12, 13, 13, 14, 15, 16, 17,
		21, 22, 23, 24, 25, 26, 27, 28,
		31, 32, 33, 34, 35, 36, 37, 38,
		41, 42, 43, 44, 45, 46, 47, 48,
		51, 52, 53, 54, 55, 56, 57, 58,
		61, 62, 63, 64, 65, 66, 67, 68,
		71, 72, 73, 74, 75, 76, 77, 78,
		81, 82, 83, 84, 85, 86, 87, 88,
		91, 92, 93, 94, 95, 96, 97, 98
	};
	
	matrix_print(matrix, 3, 4);
	puts("\n"); puts("\n");
	cube_print(cube, 5, 2, 4);
	/* matrix m2, size 9x8, block line 1, column 3, block height 3, width 2 */
	matrix_print_sub(m2, 9, 8, 1, 2, 3, 2);
}
