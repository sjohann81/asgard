/*
XTEA encryption algorithm

based on reference code released into the public domain by David Wheeler and Roger Needham
the code takes 64 bits of data in v[0] and v[1] and 128 bits of key in key[0] - key[3]

recommended number of rounds is 32 (2 Feistel-network rounds are performed on each iteration).
*/

int xtea_key = {0xf0e1d2c3, 0xb4a59687, 0x78695a4b, 0x3c2d1e0f};
 
func encipher(int num_rounds, int v, int key){
	int i = 0;
	int v0 = v[0], v1 = v[1], sum = 0, delta = 0x9E3779B9;

	while (i < num_rounds){
		v0 = v0 + ((((v1 << 4) ^ (v1 >>> 5)) + v1) ^ (sum + key[sum & 3]));
		sum = sum + delta;
		v1 = v1 + ((((v0 << 4) ^ (v0 >>> 5)) + v0) ^ (sum + key[(sum >>> 11) & 3]));
		i = i + 1;
	}
	v[0] = v0; v[1] = v1;
}
 
func decipher(int num_rounds, int v, int key){
	int i = 0;
	int v0 = v[0], v1 = v[1], delta = 0x9E3779B9, sum = delta * num_rounds;

	while (i < num_rounds){
		v1 = v1 - ((((v0 << 4) ^ (v0 >>> 5)) + v0) ^ (sum + key[(sum >>> 11) & 3]));
		sum = sum - delta;
		v0 = v0 - ((((v1 << 4) ^ (v1 >>> 5)) + v1) ^ (sum + key[sum & 3]));
		i = i + 1;
	}
	v[0] = v0; v[1] = v1;
}

func main(){
	int msg = {0x12345678, 0x90123456};
	int cycles;
	
	puts("\nmessage:");
	printh(msg[0]); putchar(' '); printh(msg[1]);
	encipher(32, msg, xtea_key);
	puts("\nencipher:");
	printh(msg[0]); putchar(' '); printh(msg[1]);
	decipher(32, msg, xtea_key);
	puts("\ndecipher:");
	printh(msg[0]); putchar(' '); printh(msg[1]);
	
	return 0;
}
